{"version":3,"sources":["main.test.js"],"names":["fs","require","childProcess","minVersionOfGitOnMacAndLinux","minVersionOfGitOnWindows","versionName","execSync","toString","getSiteBody","startWord","finishWord","fileContent","firstIndex","indexOf","lastIndex","url","substring","length","siteBody","describe","OS","allActiveProgrammes","allProgrammes","listOfExtensions","beforeAll","error","startsWith","e","test","expect","toBeTruthy","version","replace","bashPath","VSCodeVersion","toContain","demoLinkBody","testLinkBody","includes","isGoogleChromeInstaled","isFirefoxInstaled","googleChromePath","firefoxPath"],"mappings":"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","file":"main.test.14722724.js","sourceRoot":"..\\src","sourcesContent":["/* eslint-disable no-useless-escape */\r\n/* eslint-disable no-undef */\r\n'use strict';\r\n\r\nconst fs = require('fs');\r\nconst childProcess = require('child_process');\r\nconst minVersionOfGitOnMacAndLinux = 2311;\r\nconst minVersionOfGitOnWindows = 23110;\r\nconst versionName = childProcess.execSync('node -v').toString();\r\n\r\nconst getSiteBody = (startWord, finishWord) => {\r\n  const fileContent = fs.readFileSync('readme.md', 'utf8');\r\n  const firstIndex = fileContent.indexOf(startWord);\r\n  const lastIndex = fileContent.indexOf(finishWord);\r\n\r\n  const url = fileContent.substring(\r\n    firstIndex + startWord.length + 1,\r\n    lastIndex + finishWord.length,\r\n  );\r\n\r\n  const siteBody = childProcess.execSync(\r\n    `curl ${url}`\r\n  ).toString();\r\n\r\n  return siteBody;\r\n};\r\n\r\ndescribe('Environmental Check', () => {\r\n  let OS;\r\n  let allActiveProgrammes;\r\n  let allProgrammes;\r\n  let listOfExtensions;\r\n\r\n  beforeAll(() => {\r\n    try {\r\n      listOfExtensions = childProcess.execSync(\r\n        'code --list-extensions --show-versions'\r\n      ).toString();\r\n    } catch (error) {\r\n      listOfExtensions = null;\r\n    }\r\n\r\n    try {\r\n      childProcess.execSync('systeminfo');\r\n      OS = 'Windows';\r\n      allActiveProgrammes = childProcess.execSync('tasklist').toString();\r\n    } catch (error) {\r\n      try {\r\n        childProcess.execSync('lsb_release -a');\r\n        allProgrammes = childProcess.execSync('dpkg -l').toString();\r\n        OS = 'Linux';\r\n\r\n        if (versionName.startsWith('v12.')) {\r\n          OS = 'Workflow';\r\n        }\r\n      } catch (e) {\r\n        OS = 'MacOS';\r\n      }\r\n    }\r\n  });\r\n\r\n  test('You should have Node.js of 14 version', () => {\r\n    if (OS === 'Workflow') {\r\n      expect(versionName.startsWith('v12.'))\r\n        .toBeTruthy();\r\n    } else {\r\n      expect(versionName.startsWith('v14.'))\r\n        .toBeTruthy();\r\n    }\r\n  });\r\n\r\n  test('You should have Git of 2.31.1 version or newer', () => {\r\n    const version = childProcess.execSync(\r\n      'git --version'\r\n    ).toString().replace(/[^0-9]/g, '');\r\n\r\n    if (OS === 'Windows') {\r\n      expect(version >= minVersionOfGitOnWindows)\r\n        .toBeTruthy();\r\n    } else {\r\n      expect(version >= minVersionOfGitOnMacAndLinux)\r\n        .toBeTruthy();\r\n    }\r\n  });\r\n\r\n  test('You should have Bash Shell', () => {\r\n    const bashPath = childProcess.execSync('which bash').toString();\r\n\r\n    expect(!!bashPath)\r\n      .toBeTruthy();\r\n  });\r\n\r\n  test('You should have Visual Studio Code', () => {\r\n    if (OS === 'Workflow') {\r\n      expect(true)\r\n        .toBeTruthy();\r\n    } else {\r\n      const VSCodeVersion = childProcess.execSync(\r\n        'code -v'\r\n      ).toString();\r\n\r\n      expect(!!VSCodeVersion)\r\n        .toBeTruthy();\r\n    }\r\n  });\r\n\r\n  test(`You should have EditorConfig extension in Visual Studio Code`, () => {\r\n    if (OS === 'Workflow') {\r\n      expect(true)\r\n        .toBeTruthy();\r\n    } else {\r\n      expect(listOfExtensions)\r\n        .toContain('EditorConfig.EditorConfig');\r\n    }\r\n  });\r\n\r\n  test(`You should have ESLint extension in Visual Studio Code`, () => {\r\n    if (OS === 'Workflow') {\r\n      expect(true)\r\n        .toBeTruthy();\r\n    } else {\r\n      expect(listOfExtensions)\r\n        .toContain('dbaeumer.vscode-eslint');\r\n    }\r\n  });\r\n\r\n  test(`\r\n      You should have LintHTML v.0.4.0 extension in VisualStudioCode\r\n    `, () => {\r\n    if (OS === 'Workflow') {\r\n      expect(true)\r\n        .toBeTruthy();\r\n    } else {\r\n      expect(listOfExtensions)\r\n        .toContain('kamikillerto.vscode-linthtml');\r\n    }\r\n  });\r\n\r\n  test(`You should have Stylelint extension in Visual Studio Code`, () => {\r\n    if (OS === 'Workflow') {\r\n      expect(true)\r\n        .toBeTruthy();\r\n    } else {\r\n      expect(listOfExtensions)\r\n        .toContain('stylelint.vscode-stylelint');\r\n    }\r\n  });\r\n\r\n  test(`You should deploy your site to GitHub pages`, () => {\r\n    if (OS === 'Workflow') {\r\n      const demoLinkBody = getSiteBody('[DEMO LINK]', 'world/');\r\n\r\n      expect(demoLinkBody)\r\n        .toContain('Hello, world!');\r\n    }\r\n\r\n    expect(true)\r\n      .toBeTruthy();\r\n  });\r\n\r\n  test(`You should deploy test page to GitHub pages`, () => {\r\n    if (OS === 'Workflow') {\r\n      const testLinkBody = getSiteBody('[TEST REPORT LINK]', '_report/');\r\n\r\n      expect(testLinkBody)\r\n        .toContain('BackstopJS Report');\r\n    }\r\n\r\n    expect(true)\r\n      .toBeTruthy();\r\n  });\r\n\r\n  test('You should have Google Chrome or Firefox', () => {\r\n    if (OS === 'Windows') {\r\n      try {\r\n        if (!allActiveProgrammes.includes('chrome.exe')) {\r\n          childProcess.execSync('start chrome');\r\n          childProcess.execSync('taskkill /im chrome.exe');\r\n\r\n          expect(true)\r\n            .toBeTruthy();\r\n        }\r\n\r\n        expect(true)\r\n          .toBeTruthy();\r\n      } catch (error) {\r\n        if (!allActiveProgrammes.includes('firefox.exe')) {\r\n          childProcess.execSync('start firefox');\r\n          childProcess.execSync('taskkill /im firefox.exe');\r\n\r\n          expect(true)\r\n            .toBeTruthy();\r\n        }\r\n\r\n        expect(true)\r\n          .toBeTruthy();\r\n      }\r\n    }\r\n\r\n    if (OS === 'Linux') {\r\n      const isGoogleChromeInstaled = allProgrammes.includes('google-chrome');\r\n      const isFirefoxInstaled = allProgrammes.includes('firefox');\r\n\r\n      expect(isGoogleChromeInstaled || isFirefoxInstaled)\r\n        .toBeTruthy();\r\n    }\r\n\r\n    if (OS === 'MacOS') {\r\n      const googleChromePath = childProcess.execSync(\r\n        'mdfind -name google chrome'\r\n      ).toString();\r\n      const firefoxPath = childProcess.execSync(\r\n        'mdfind -name firefox'\r\n      ).toString();\r\n\r\n      expect(!!googleChromePath || !!firefoxPath)\r\n        .toBeTruthy();\r\n    }\r\n  });\r\n});\r\n"]}